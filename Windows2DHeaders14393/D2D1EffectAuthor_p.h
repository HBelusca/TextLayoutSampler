//---------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
// This file is automatically generated.  Please do not edit it directly.
//
// File name: D2D1EffectAuthor_p.h
//---------------------------------------------------------------------------
#ifdef _MSC_VER
#pragma once
#endif // #ifdef _MSC_VER

#ifndef _D2D1EFFECTAUTHOR_P_H_
#define _D2D1EFFECTAUTHOR_P_H_


#if _MSC_VER > 1000
#pragma once
#endif

#ifndef _D2D1P_H_
#include <D2D1p.h>
#endif // #ifndef _D2D1P_H_
#ifndef _D2D1_EFFECT_AUTHOR_1_H_
#include <D2D1EffectAuthor_1.h>
#endif // #ifndef _D2D1_EFFECT_AUTHOR_1_H_

/// <summary>
/// The level of invalidation required due to state changes on an ink stamp
/// generator.
/// </summary>
typedef enum D2D1_INK_CACHE_INVALIDATION_TYPE
{
    D2D1_INK_CACHE_INVALIDATION_TYPE_NONE = 0x00000000,
    D2D1_INK_CACHE_INVALIDATION_TYPE_VERTEX_LAYOUT = 0x00000001,
    D2D1_INK_CACHE_INVALIDATION_TYPE_VERTICES = 0x00000002,
    D2D1_INK_CACHE_INVALIDATION_TYPE_STAMP_DATA = 0x00000004,
    D2D1_INK_CACHE_INVALIDATION_TYPE_GROUP_DATA = 0x00000008,
    D2D1_INK_CACHE_INVALIDATION_TYPE_FORCE_DWORD = 0xffffffff

} D2D1_INK_CACHE_INVALIDATION_TYPE;

DEFINE_ENUM_FLAG_OPERATORS(D2D1_INK_CACHE_INVALIDATION_TYPE);


/// <summary>
/// Represents the lengths within the current group passed to
/// ID2D1InkStampGenerator::GenerateStamps which should be invisible due to erasing.
/// This does not represent the logical erased distances, which are stored within
/// INK_SEGMENT_GROUP_GENERATION_PARAMETERS.  Ghosted regions may cover none, some,
/// or all of the logical erased regions.  Their purpose is to allow the stamp
/// generator to preserve exact appearance and minimize dirty regions after erasing
/// occurs.
/// </summary>
typedef struct D2D1_INK_ERASE_DATA
{
    FLOAT startGhostedLength;
    FLOAT endGhostedLength;

} D2D1_INK_ERASE_DATA;


/// <summary>
/// Describes the vertex layout used by an ink stamp generator.
/// </summary>
typedef struct D2D1_INK_VERTEX_LAYOUT
{
    _Field_size_opt_(elementCount) CONST D2D1_INPUT_ELEMENT_DESC *inputElements;
    UINT32 elementCount;
    UINT32 stride;

} D2D1_INK_VERTEX_LAYOUT;


/// <summary>
/// The indices within an array of constant buffer elements.  Constant buffer
/// elements are set by an ink effect, while D2D manages the array.  D2D uses this
/// structure to notify stamp generators of the appropriate indices to embed in
/// vertices during tessellation.
/// </summary>
typedef struct D2D1_INK_CONSTANT_BUFFER_INDEXING
{
    UINT16 builtInVertexShaderConstantBufferIndex;
    UINT16 customVertexShaderConstantBufferIndex;
    UINT16 customPixelShaderConstantBufferIndex;

} D2D1_INK_CONSTANT_BUFFER_INDEXING;


/// <summary>
/// The properties for arrays within constant buffers used by ink effects.
/// </summary>
typedef struct D2D1_INK_CONSTANT_BUFFER_PROPERTIES
{
    UINT32 builtInVertexShaderConstantBufferElementCount;
    UINT32 customVertexShaderConstantBufferElementSize;
    UINT32 customVertexShaderConstantBufferElementCount;
    UINT32 customPixelShaderConstantBufferElementSize;
    UINT32 customPixelShaderConstantBufferElementCount;

} D2D1_INK_CONSTANT_BUFFER_PROPERTIES;


/// <summary>
/// Parameters passed to ID2D1InkStampGenerator::GenerateSegmentGroups
/// </summary>
typedef struct D2D1_INK_SEGMENT_GROUP_GENERATION_PARAMETERS
{
    
    /// <summary>
    /// Previous group data stored by the stamp generator.  This is NULL while
    /// generating the first group.
    /// </summary>
    _Field_size_opt_(previousGroupDataSize) CONST BYTE *previousGroupData;
    
    /// <summary>
    /// The size of a segment group data blob.  Controlled by
    /// ID2DInkStampGenerator::GetDataSizes.
    /// </summary>
    UINT32 previousGroupDataSize;
    D2D1_INK_STROKE_DATA strokeData;
    
    /// <summary>
    /// Distance from the logical beginning of the stroke to the start of the group
    /// </summary>
    FLOAT distanceFromLogicalStart;
    
    /// <summary>
    /// Distance from the start of the group to the logical end of the stroke
    /// </summary>
    FLOAT distanceFromLogicalEnd;

} D2D1_INK_SEGMENT_GROUP_GENERATION_PARAMETERS;


/// <summary>
/// Parameters passed to ID2D1InkStampGenerator::GenerateStamps
/// </summary>
typedef struct D2D1_INK_STAMP_GENERATION_PARAMETERS
{
    
    /// <summary>
    /// Data returned by GenerateSegmentGroups while processing the same segment group.
    /// </summary>
    _Field_size_(groupDataSize) CONST BYTE *groupData;
    
    /// <summary>
    /// The size of a segment group data blob.  Controlled by
    /// ID2DInkStampGenerator::GetDataSizes.
    /// </summary>
    UINT32 groupDataSize;
    
    /// <summary>
    /// Data returned by GenerateStamps while processing the previous segment group.
    /// This is NULL while generating stamps in the first segment group.
    /// </summary>
    _Field_size_opt_(stampingDataSize) CONST BYTE *stampingData;
    
    /// <summary>
    /// The size of a stamping data blob.  Controlled by
    /// ID2DInkStampGenerator::GetDataSizes.
    /// </summary>
    UINT32 stampingDataSize;
    D2D1_INK_STROKE_DATA strokeData;
    
    /// <summary>
    /// Regions of segment data within the group that should be made invisible
    /// </summary>
    D2D1_INK_ERASE_DATA eraseData;
    
    /// <summary>
    /// Specifies the location of corresponding constant data which must be referenced
    /// within vertices.
    /// </summary>
    D2D1_INK_CONSTANT_BUFFER_INDEXING constantBufferIndexing;

} D2D1_INK_STAMP_GENERATION_PARAMETERS;


/// <summary>
/// Parameters for a built-in stamp generator which places stamps at constant
/// distances (GUID_InkStampGeneratorConstantDistance)
/// </summary>
typedef struct D2D1_CONSTANT_DISTANCE_GENERATOR_PARAMETERS
{
    FLOAT stampSpacing;
    FLOAT maximumRelevantDistanceToLogicalEnd;
    
    /// <summary>
    /// The number of extra FLOAT fields in each ink point beyond XY position.  These
    /// extra fields are simply interpolated by the stamp generator.
    /// </summary>
    UINT32 extraFieldCount;

} D2D1_CONSTANT_DISTANCE_GENERATOR_PARAMETERS;




#ifndef D2D_USE_C_DEFINITIONS


                
// {975E6D01-3280-4B16-8594-216C8FE1D698}
DEFINE_GUID(GUID_InkStampGeneratorConstantDistance, 0x975e6d01, 0x3280, 0x4b16, 0x85, 0x94, 0x21, 0x6c, 0x8f, 0xe1, 0xd6, 0x98);

/// <summary>
/// Function pointer to construct a new ink stamp generator once registered.
/// </summary>
interface ID2D1InkStampGenerator;

typedef HRESULT (CALLBACK *PD2D1_STAMP_GENERATOR_FACTORY)(
    _Outptr_ ID2D1InkStampGenerator **stampGenerator
    );

                 

/// <summary>
/// Used during effect registration and un-registration with internal effect types
/// </summary>
interface DX_DECLARE_INTERFACE("5ffab0d0-7fe9-4d9a-abfe-b59a43bc3887") ID2D1PrivateInkingEffectFactory  : public IUnknown
{
    
    /// <summary>
    /// Registers an ink stamp generator used within an ink effect.
    /// </summary>
    STDMETHOD(RegisterInkStampGenerator)(
        _In_ REFGUID guid,
        UINT32 stateBlockSize,
        _In_ CONST PD2D1_STAMP_GENERATOR_FACTORY stampGeneratorFactory 
        ) PURE;
    
    /// <summary>
    /// Unregisters an ink stamp generator.
    /// </summary>
    STDMETHOD(UnregisterInkStampGenerator)(
        _In_ REFGUID guid 
        ) PURE;
}; // interface ID2D1PrivateInkingEffectFactory


/// <summary>
/// Implemented by D2D and called by the GenerateStamps method of an ink effect's
/// stamp generator.
/// </summary>
interface DX_DECLARE_INTERFACE("0ff0fdef-8639-4c4e-9adc-586796f383fb") ID2D1InkStampSink  : public IUnknown
{
    
    /// <summary>
    /// Adds vertices for rendering stamps.
    /// </summary>
    STDMETHOD_(void, AddVertices)(
        _In_reads_(vertexStride * vertexCount) CONST BYTE *vertices,
        UINT32 vertexStride,
        UINT32 vertexCount 
        ) PURE;
}; // interface ID2D1InkStampSink


/// <summary>
/// Implemented by ink effects requiring custom stamp generation
/// </summary>
interface DX_DECLARE_INTERFACE("2fbc1609-2321-496a-9e8a-b68aec227883") ID2D1InkStampGenerator  : public IUnknown
{
    
    /// <summary>
    /// Sets the parameters onto the stamp generator.  The parameters were set at an
    /// earlier point by the ink effect and match the state block size passed to
    /// RegisterInkStampGenerator.
    /// </summary>
    STDMETHOD(SetParameters)(
        _In_reads_(newParametersSize) CONST BYTE *newParameters,
        UINT32 newParametersSize 
        ) PURE;
    
    /// <summary>
    /// Gets the size of blobs which the stamp generator can store onto each segment
    /// group.
    /// </summary>
    STDMETHOD(GetDataSizes)(
        _Out_ UINT32 *groupDataSize,
        _Out_ UINT32 *stampingDataSize 
        ) CONST PURE;
    
    /// <summary>
    /// The maximum distance (plus rounding up to next segment boundary) beyond the end
    /// of a segment group that could affect the size or parameters of that group as it
    /// is formed by GenerateSegmentGroup.  This must also be as large as the distance
    /// from the stroke's logical end over which variation such as tapering can occur.
    /// </summary>
    STDMETHOD_(FLOAT, GetGroupCreationLookAheadDistance)(
        ) CONST PURE;
    
    /// <summary>
    /// Gets the invalidation level for the stamp generator for its current parameters
    /// versus the provided parameters
    /// </summary>
    STDMETHOD(GetInvalidation)(
        _In_reads_(otherParametersSize) CONST BYTE *otherParameters,
        UINT32 otherParametersSize,
        _Out_ D2D1_INK_CACHE_INVALIDATION_TYPE *invalidation 
        ) CONST PURE;
    
    /// <summary>
    /// Generates the next segments group and associated blob data. Segment groups help
    /// minimize dirty regions and appearance changes, and minimize re-processing.  Once
    /// a group is formed, D2D preserves it until subsequent segments at the end of the
    /// stroke (within the distance returned by GetGroupCreationLookAheadDistance) are
    /// added or adjusted, or the group is invalidated according to GetInvalidation.
    /// </summary>
    STDMETHOD(GenerateSegmentGroup)(
        _In_ CONST D2D1_INK_SEGMENT_GROUP_GENERATION_PARAMETERS *parameters,
        _Out_ UINT32 *newGroupSegmentCount,
        _Out_writes_(groupDataSize) BYTE *newGroupData,
        UINT32 groupDataSize 
        ) CONST PURE;
    
    /// <summary>
    /// Generates stamps for a given segment group and returns a data blob that is
    /// propagated to generation of the next segment group's stamps.  This data blob is
    /// cached until the group is changed or invalidated through GetInvalidation.
    /// </summary>
    STDMETHOD(GenerateStamps)(
        _In_ CONST D2D1_INK_STAMP_GENERATION_PARAMETERS *parameters,
        _In_opt_ ID2D1InkStampSink *sink,
        _Out_writes_(nextStampingDataSize) BYTE *nextStampingData,
        UINT32 nextStampingDataSize 
        ) CONST PURE;
}; // interface ID2D1InkStampGenerator


/// <summary>
/// Contains the rendering parameters set by an effect for rendering an ink stroke
/// </summary>
interface DX_DECLARE_INTERFACE("18d486e2-a897-43e5-aa6f-5f72e260f29c") ID2D1InkDrawInfo  : public ID2D1DrawInfo
{
    
    /// <summary>
    /// Sets parameters needed by D2D to accumulate arrays of different constant buffer
    /// data and indicates the appropriate indices to stamp generators.  Zeroing these
    /// parameters disables this feature.
    /// </summary>
    STDMETHOD_(void, SetConstantBufferProperties)(
        _In_ CONST D2D1_INK_CONSTANT_BUFFER_PROPERTIES *properties 
        ) PURE;
    
    /// <summary>
    /// Selects a built-in or custom stamp generator, and parameters for that stamp
    /// generator in its expected format.
    /// </summary>
    STDMETHOD(SetStampGenerator)(
        _In_ REFGUID guid,
        _In_reads_(parametersCount) CONST BYTE *parameters,
        UINT32 parametersCount 
        ) PURE;
    
    /// <summary>
    /// Sets the vertex shader and blending mode used to render ink stamps.  The vertex
    /// format must match that used by the selected stamp generator in its selected
    /// state.
    /// </summary>
    STDMETHOD(SetStampVertexProcessing)(
        _In_opt_ CONST D2D1_BLEND_DESCRIPTION *blendDescription,
        REFGUID vertexShader 
        ) PURE;
    
    /// <summary>
    /// Sets the maximum bounding region of any stamp along the path of an ink stroke.
    /// </summary>
    STDMETHOD(SetMaximumStampBounds)(
        _In_ CONST D2D1_RECT_F *maximumStampRect 
        ) PURE;
    
    /// <summary>
    /// Sets the transforms used while rendering the ink stroke, allowing D2D to compute
    /// bounds
    /// </summary>
    STDMETHOD(SetTransforms)(
        _In_ CONST D2D1_MATRIX_3X2_F *sceneToOutputTransform,
        _In_reads_(inputCount) CONST D2D1_MATRIX_3X2_F *sceneToInputTransform,
        _In_reads_(inputCount) CONST FLOAT *inputInflation,
        UINT32 inputCount 
        ) PURE;
}; // interface ID2D1InkDrawInfo


/// <summary>
/// Transform node within an effect's internal graph which draws an ink stroke.
/// Implemented by the effect author.
/// </summary>
interface DX_DECLARE_INTERFACE("835af407-d02d-41bc-b883-d8ed480527c2") ID2D1InkTransform  : public ID2D1TransformNode
{
    
    /// <summary>
    /// Provides the object onto which the transform should set parameters for rendering
    /// the ink stroke
    /// </summary>
    STDMETHOD(SetInkDrawInfo)(
        _In_ ID2D1InkDrawInfo *drawInfo 
        ) PURE;
}; // interface ID2D1InkTransform



#endif

#endif // #ifndef _D2D1EFFECTAUTHOR_P_H_
